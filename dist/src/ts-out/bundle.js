!function(n){var r={};function t(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return n[e].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=r,t.d=function(n,r,e){t.o(n,r)||Object.defineProperty(n,r,{enumerable:!0,get:e})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,r){if(1&r&&(n=t(n)),8&r)return n;if(4&r&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(t.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&r&&"string"!=typeof n)for(var o in n)t.d(e,o,function(r){return n[r]}.bind(null,o));return e},t.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(r,"a",r),r},t.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},t.p="",t(t.s=2)}([function(n,r,t){"use strict";function e(n){for(var r="",t=n.length-1;t>=0;t--)r+=n[t];return r}r.__esModule=!0,r.reverseString=e,r.isPalindrome=function(n){var r=n.toString();return r===e(r)},r.flatten=function n(r){return r.reduce(function(r,t){return Array.isArray(t)&&(t=n(t)),r.concat(t)},[])},r.cloneData=function(n){return JSON.parse(JSON.stringify(n))},r.numberSort=function(n,r){return n-r}},function(n,r,t){"use strict";r.__esModule=!0;var e=t(0);function o(n){if(0===n)throw"Zero has an infinite number of factors.";if(n%1!=0)throw"Factoring floating point numbers is pointless.";var r=!1;n<0&&(r=!0,n=Math.abs(n));for(var t=[1,n],o=2;o<Math.ceil(Math.sqrt(n))+1;o++)if(n%o==0&&!t.includes(o)){t.push(o);var i=n/o;o!==i&&t.push(i)}if(r){for(var a=[],u=0,c=t;u<c.length;u++){var f=c[u];a.push(-1*f)}t=t.concat(a)}return t.sort(e.numberSort)}function i(n){if(n%1!=0)return!1;if(n<2)return!1;for(var t=0,e=r.json.prime.data;t<e.length;t++){var i=e[t];if(n%i==0)return n===i}return!(o(n).length>2)&&(r.json.prime.data.push(n),!0)}function a(n){var r=o(n);if(2===r.length)return[r[1]];var t=[];t.push(r[1]),t.push(n/r[1]);for(var u=0;u<t.length;u++)i(t[u])||(t[u]=a(t[u]));return e.flatten(t).sort(e.numberSort)}r.json=t(3),r.fibonacci=function(n){if(n<r.json.fibonacci.data.length)return r.json.fibonacci.data[n];for(;n>=r.json.fibonacci.data.length;){var t=r.json.fibonacci.data.length-1,e=r.json.fibonacci.data.length-2,o=r.json.fibonacci.data[t],i=r.json.fibonacci.data[e];r.json.fibonacci.data.push(o+i)}return r.json.fibonacci.data[n]},r.getFactors=o,r.isPrime=i,r.getPrimeFactors=function(n){for(var r=[],t=0,a=o(n);t<a.length;t++){var u=a[t];i(u)&&r.push(u)}return r.sort(e.numberSort)},r.primeComposition=a,console.log(a(360))},function(n,r,t){"use strict";r.__esModule=!0;var e=t(0),o=t(1);for(var i=0;i<1e3;i++)o.isPrime(i);console.log("Updating saved data...");var a=t(1);console.log("Sorting prime numbers..."),a.json.prime.data.sort(e.numberSort),console.log("Writing to file..."),t(4).writeFile("./utility/seq.json",JSON.stringify(a.json,null,4),function(n){n&&console.error(n),console.log("Save completed.")})},function(n){n.exports={prime:{comment:"Prime numbers found so far.",data:[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1471,6857]},fibonacci:{comment:"The numbers in the fibonacci sequence (starting from 1), that have been calculated so far.",data:[1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887]}}},function(n,r){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,